library(dplyr)
library(tidyr)
library(ggplot2)
# Prepare data
long_data <- data %>%
select(Condition, all_of(columns)) %>%
mutate(Condition = factor(Condition, levels = c("AI", "User"))) %>%
pivot_longer(-Condition, names_to = "Variable", values_to = "Score") %>%
mutate(Score = as.numeric(Score)) %>%
mutate(Variable = factor(Variable, levels = unique(Variable)))
# Compute stats per variable
stats_df <- long_data %>%
group_by(Variable, Condition) %>%
summarise(
mean = mean(Score, na.rm = TRUE),
sd = sd(Score, na.rm = TRUE),
.groups = "drop"
)
# T-tests per variable
t_test_results <- long_data %>%
group_by(Variable) %>%
summarise(
p_value = t.test(Score ~ Condition)$p.value,
.groups = "drop"
)
# Label mapping
label_df <- data.frame(Variable = levels(long_data$Variable), Label = labels)
# Merge mean & SD (averaged across conditions) and other info
avg_sd_df <- stats_df %>%
group_by(Variable) %>%
summarise(sd = mean(sd, na.rm = TRUE), .groups = "drop")
long_data <- long_data %>%
left_join(t_test_results, by = "Variable") %>%
left_join(avg_sd_df, by = "Variable") %>%
left_join(label_df, by = "Variable") %>%
mutate(facet_label = paste0(Label, "\n(p = ", signif(p_value, 3), ")", "\n(sd = ", signif(sd, 3), ")"))
# Plot
p <- ggplot(long_data, aes(x = Condition, y = Score, fill = Condition)) +
geom_boxplot() +
geom_jitter(width = 0.15, alpha = 0.4) +
facet_wrap(~ facet_label, scales = "free_y") +
scale_fill_manual(values = c("AI" = "steelblue", "User" = "tomato")) +
labs(
title = title,
x = NULL,
y = "Score"
) +
theme_minimal() +
theme(legend.position = "none", strip.text = element_text(size = 12))
return(p)
}
plot_multiple_variables_boxplot(
data = data,
columns = c(12, 19, 26, 27),
labels = c(
"Engagement",
"Perceived Usefulness",
"Perceived Ease of Use (PEU)",
"Intention to Use"
),
title = "Scores for each construct (Boxplot)"
)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
# Load the data
data <- read.csv("./data/Questionnaire_data.csv")
# Display the first few rows of the data
head(data)
df <- data %>%
select(Condition, Køn) %>%
mutate(Køn = factor(Køn, levels = c("Male", "Female")))
# Create a histogram (or rather a bar plot, since Køn is categorical)
p <- ggplot(df, aes(x = Køn,fill = Condition)) +
geom_bar(position = "dodge") +
labs(title = "Gender by Condition (AI initiated vs User initiated)", x = "Gender", y = "Antal") +
scale_fill_manual(values = c(
"AI" = "steelblue",
"User" = "tomato")) +
theme_minimal()
# Show plot
p
# Save plot
ggsave(filename = paste0("plots/","Questionnaire_Gender",".png"), plot = p, width = 10, height = 6, dpi = 300, bg = "white")
df <- data %>%
select(Condition, Alder) %>%
mutate(Alder = factor(Alder, levels = c("21-25","26-30")))
# Create a histogram (or rather a bar plot, since Age is categorical)
p <- ggplot(df, aes(x = Alder,fill = Condition)) +
geom_bar(position = "dodge") +
labs(title = "Age by Condition (AI initiated vs User initiated)", x = "Age", y = "Antal") +
scale_fill_manual(values = c(
"AI" = "steelblue",
"User" = "tomato")) +
theme_minimal()
# Show plot
p
ggsave(filename = paste0("plots/","Questionnaire_Age",".png"), plot = p, width = 10, height = 6, dpi = 300, bg = "white")
# Load your data
data <- read.csv("./data/AI_usage_data.csv", dec = ",")
data
# Define your labels
my.labels <- c(
"ChatGPT",	"Google Gemini",	"Siri",	"Microsoft Copilot",	"GitHub Copilot", 	"GrammalyGO",	"CanvaAI",	"I do not use AI", 	"Other"
)
# Manually create the dataframe
df <- tibble::tibble(
Group = c("AI", "User"),
ChatGPT = c(9, 8),
Google_Gemini = c(0, 3),
Siri = c(2, 0),
Microsoft_Copilot = c(1, 2),
GitHub_Copilot = c(2, 1),
GrammarlyGO = c(0, 0),
CanvaAI = c(1, 0)
)
# Pivot longer for ggplot
df_long <- df %>%
pivot_longer(cols = -Group, names_to = "Tool", values_to = "Count")
# Reorder Tool levels based on total count (descending)
df_long <- df_long %>%
group_by(Tool) %>%
mutate(TotalCount = sum(Count)) %>%
ungroup() %>%
mutate(Tool = reorder(Tool, -TotalCount))
df_long
# Plot
p <- ggplot(df_long, aes(x = Tool, y = Count, fill = Group)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), width=0.8) +
labs(title = "AI Tools Usage by Group", x = "Tool", y = "Count") +
theme_minimal() +
scale_y_continuous(breaks = seq(0, 10, 1)) +
scale_fill_manual(values = c(
"AI" = "steelblue",
"User" = "tomato")) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top",
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
# Save the plot
ggsave(filename = "plots/Questionnaire_AI_usage_by_group.png", plot = p, width = 10, height = 6, dpi = 300, bg = "white")
# Show plot
p
library(ggplot2)
library(dplyr)
library(tidyr)
Questionnaire_plot <- function(data, questions, columns, title, title_offset) {
# Prepare the data
Engagement <- data %>%
select(Condition, all_of(columns)) %>%
mutate(Condition = factor(Condition, levels = c("AI", "User"))) %>%
mutate(across(2:ncol(.), as.numeric))
# Pivot longer
Engagement_long <- Engagement %>%
pivot_longer(cols = -Condition,
names_to = "Question",
values_to = "Score") %>%
mutate(Question = factor(Question, levels = unique(Question)))
# Plot
p <- ggplot(Engagement_long, aes(x = Question, y = Score, fill = Condition)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge()) +
labs(title = title,
x = "", y = "Average Score") +
stat_summary(fun = mean,
geom = "text",
aes(label = round(..y.., 2)),
position = position_dodge(width = 0.9),
vjust = 0.4, hjust = 1.2, size = 3.5) +
scale_x_discrete(labels = questions) +
scale_fill_manual(values = c(
"AI" = "steelblue",
"User" = "tomato")) +
theme_minimal() +
theme(legend.position = "top",panel.grid.minor = element_line(color = "grey78")) +
coord_flip()
# Save plot
ggsave(filename = paste0("plots/","Questionnaire_",title, ".png"), plot = p, width = 10, height = 6, dpi = 300, bg = "white")
# Return plot
return(p)
}
# Load your data
data <- read.csv("./data/Questionnaire_data.csv", dec = ",")
# Define your labels
my.labels <- c(
"I hvilken grad følte du dig mentalt fordybet i oplevelsen? \n(1 = Slet ikke, 7 Rigtig meget)",
"Hvor involverende var oplevelsen? \n(1 = Slet ikke, 7 Rigtig meget)",
"Hvor fuldstændigt blev dine sanser engageret? \n(1 = Slet ikke, 7 Rigtig meget)",
"I hvilken grad oplevede du en følelse af virkelighed?\n(1 = Slet ikke, 7 Rigtig meget)",
"Hvor engagerende var samtalen? \n(1 = Slet ikke, 7 Rigtig meget)",
"Hvor afslappende eller spændende var oplevelsen? \n(1 = Meget afslappende, 7 Meget spændende)"
)
# Call the function
Questionnaire_plot(data, questions = my.labels, columns = 6:11, title = "Average Engagement per question by Condition",title_offset=0)
# Load your data
data <- read.csv("./data/Questionnaire_data.csv", dec = ",")
# Define your labels
my.labels <- c(
"Brugen af ROSIE i mit projekt \nville gøre mig i stand til at udføre opgaver hurtigere \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Brugen af ROSIE ville kunne forbedre min arbejdspræstation \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Brugen af ROSIE i mit arbejde ville øge min produktivitet. \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Brugen af ROSIE ville forbedre min evne til at udføre \nmit arbejde godt. \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Brugen af ROSIE ville gøre det \nlettere at udføre mit arbejde. \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Jeg synes at ROSIE ville være nyttig i mit arbejde. \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)"
)
# Call the function
Questionnaire_plot(data, questions = my.labels, columns = 6:11, title = "Perceived usefulness per question by Condition",title_offset=0)
# Load your data
data <- read.csv("./data/Questionnaire_data.csv", dec = ",")
# Define your labels
my.labels <- c(
"Det ville være nemt for mig at lære at betjene ROSIE \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Jeg ville have nemt ved at få ROSIE \ntil at gøre hvad jeg ville have hende til at gøre \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Min interaktion med ROSIE ville være tydelig og forståelig \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Jeg kunne forestille mig, at ROSIE ville være tydelig og forståelig \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Det ville være nemt for mig at blive dygtig til at bruge ROSIE \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)",
"Jeg kunne forestille mig, at ROSIE ville være nem at bruge \n(1 = Meget usandsynligt, 7 = Meget sandsynligt)"
)
# Call the function
Questionnaire_plot(data, questions = my.labels, columns = 6:11, title = " Perceived Ease of Use (PEU) per question by Condition",title_offset=-0.6)
# Load your data
data <- read.csv("./data/Questionnaire_data.csv", dec = ",")
Intention_To_use_data <- data %>%
select(Condition, 27) %>%
mutate(Condition = factor(Condition, levels = c("AI", "User"))) %>%
mutate(across(2:ncol(.), as.numeric))
# Pivot longer
Intention_To_use_data_long <- Intention_To_use_data %>%
pivot_longer(cols = -Condition,
names_to = "Question",
values_to = "Score") %>%
mutate(Question = factor(Question, levels = unique(Question)))
Intention_To_use_data_long
# T-test
t_test_result <- t.test(Intention_To_use_data_long$Score ~ Intention_To_use_data_long$Condition)
t_test_result
IntentiontoUsewithPvalueString <- paste("Intention to use (p =", round(t_test_result$p.value, 3), ")")
Engagement_data <- data %>%
select(Condition, 12) %>%
mutate(Condition = factor(Condition, levels = c("AI", "User"))) %>%
mutate(across(2:ncol(.), as.numeric))
# Pivot longer
Engagement_data_long <- Engagement_data %>%
pivot_longer(cols = -Condition,
names_to = "Question",
values_to = "Score") %>%
mutate(Question = factor(Question, levels = unique(Question)))
Engagement_data_long
# T-test
t_test_result <- t.test(Engagement_data_long$Score ~ Engagement_data_long$Condition)
t_test_result
EngagementwithPvalueString <- paste("Engagement (p =", round(t_test_result$p.value, 3), ")")
# Define your labels
my.labels <- c(
EngagementwithPvalueString,
"Percieved usefulness",
"Perceived Ease of Use (PEU)",
IntentiontoUsewithPvalueString
)
# Call the function
Questionnaire_plot(data, questions = my.labels, columns = c(12,19,26,27), title = "Scores for each construct",title_offset = 0.4)
plot_multiple_variables_boxplot <- function(data, columns, labels, title = "Boxplots for Constructs") {
library(dplyr)
library(tidyr)
library(ggplot2)
# Prepare data
long_data <- data %>%
select(Condition, all_of(columns)) %>%
mutate(Condition = factor(Condition, levels = c("AI", "User"))) %>%
pivot_longer(-Condition, names_to = "Variable", values_to = "Score") %>%
mutate(Score = as.numeric(Score)) %>%
mutate(Variable = factor(Variable, levels = unique(Variable)))
# Compute stats per variable
stats_df <- long_data %>%
group_by(Variable, Condition) %>%
summarise(
mean = mean(Score, na.rm = TRUE),
sd = sd(Score, na.rm = TRUE),
.groups = "drop"
)
# T-tests per variable
t_test_results <- long_data %>%
group_by(Variable) %>%
summarise(
p_value = t.test(Score ~ Condition)$p.value,
.groups = "drop"
)
# Label mapping
label_df <- data.frame(Variable = levels(long_data$Variable), Label = labels)
# Merge mean & SD (averaged across conditions) and other info
avg_sd_df <- stats_df %>%
group_by(Variable) %>%
summarise(sd = mean(sd, na.rm = TRUE), .groups = "drop")
long_data <- long_data %>%
left_join(t_test_results, by = "Variable") %>%
left_join(avg_sd_df, by = "Variable") %>%
left_join(label_df, by = "Variable") %>%
mutate(facet_label = paste0(Label, "\n(p = ", signif(p_value, 3), ")", "\n(sd = ", signif(sd, 3), ")"))
# Plot
p <- ggplot(long_data, aes(x = Condition, y = Score, fill = Condition)) +
geom_boxplot() +
geom_jitter(width = 0.15, alpha = 0.4) +
facet_wrap(~ facet_label, scales = "free_y") +
scale_fill_manual(values = c("AI" = "steelblue", "User" = "tomato")) +
labs(
title = title,
x = NULL,
y = "Score"
) +
theme_minimal() +
theme(legend.position = "none", strip.text = element_text(size = 12))
# Save the plot
ggsave(filename = paste0("plots/", "Questionnaire_", gsub(" ", "_", title), ".png"), plot = p, width = 8, height = 8, dpi = 300, bg = "white")
return(p)
}
plot_multiple_variables_boxplot(
data = data,
columns = c(12, 19, 26, 27),
labels = c(
"Engagement",
"Perceived Usefulness",
"Perceived Ease of Use (PEU)",
"Intention to Use"
),
title = "title = Scores for each construct"
)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
# Load the data
data <- read.csv("./data/Transcription_data.csv")
analyze_variable <- function(data, variable_name) {
library(dplyr)
library(tidyr)
library(ggplot2)
# Filter and reshape data
data_filtered <- data %>%
filter(Variable %in% c(variable_name, "AI Initiated")) %>%
pivot_wider(names_from = Variable, values_from = Value)
# Clean numeric variable (remove ' chars')
data_filtered[[variable_name]] <- as.numeric(gsub(" chars", "", data_filtered[[variable_name]]))
# Convert AI Initiated to factor and label clearly
data_filtered$InitiationType <- factor(
ifelse(data_filtered[["AI Initiated"]] == "True", "AI initiated", "User initiated"),
levels = c("AI initiated", "User initiated")
)
# Perform t-test
t_test_result <- t.test(data_filtered[[variable_name]] ~ data_filtered$InitiationType)
print(t_test_result)
# Format p-value for display
p_val <- signif(t_test_result$p.value, 3)
df <- round(t_test_result$parameter, 2)
# Calculate standard deviation by group
group_sd <- data_filtered %>%
group_by(InitiationType) %>%
summarise(sd = sd(!!sym(variable_name), na.rm = TRUE)) %>%
ungroup()
# Format SD text for annotation
sd_text <- paste(
paste("\n User ", "SD =", signif(group_sd$sd[1], 3)),
paste("AI ","SD =", signif(group_sd$sd[2], 3),"\n"),
sep = "\n"
)
# Create the plot
y_max <- max(data_filtered[[variable_name]], na.rm = TRUE)
y_min <- min(data_filtered[[variable_name]], na.rm = TRUE)
y_range <- y_max - y_min
# Position of annotation
text_x <- 1.5
text_y <- y_max - 0.1 * y_range  # Slightly above the highest point
# Rectangle size relative to data range
rect_height <- 0.3 * y_range
rect_width <- 0.55  # constant width across plots
p <- ggplot(data_filtered, aes(x = InitiationType, y = !!sym(variable_name), fill = InitiationType)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
# Draw white rectangle first
annotate("rect",
xmin = text_x - rect_width / 2, xmax = text_x + rect_width / 2,
ymin = text_y - rect_height / 2, ymax =  text_y + rect_height / 1.2,
fill = "white", color = "black", alpha = 1) +
# Then draw the text
annotate("text",
x = text_x,
y = text_y,
label = paste0("p = ", p_val, "\ndf = ", df, sd_text),
size = 5, hjust = 0.5) +
labs(
title = paste("Comparison of", variable_name, "by AI Initiation"),
x = "Initiation Type",
y = variable_name
) +
scale_fill_manual(
values = c("AI initiated" = "steelblue", "User initiated" = "tomato")
) +
scale_y_continuous(
labels = scales::comma,
limits = c(0, y_max + 0.2 * y_range)  # extend a bit more to fit the box
) +
theme_minimal() +
theme(legend.position = "none")
# Save the plot
ggsave(
filename = paste0("plots/Transcription_", gsub(" ", "_", variable_name), ".png"),
plot = p, width = 10, height = 6, dpi = 300, bg = "white"
)
return(list(plot = p, t_test = t_test_result))
}
# Analyze "Average Sentence Length of User"
result_Sentence  <- analyze_variable(data, "Average Sentence Length of User")
# Show the plot
result_Sentence$plot
# Analyze "Average Sentence Length of User"
result_Time <- analyze_variable(data, "Difference in Seconds")
result_Time$plot
# Analyze "Average Sentence Length of User"
result_Turns <- analyze_variable(data, "Total Turns")
result_Turns$plot
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
# Load the data
data <- read.csv("./data/Transcription_data.csv")
analyze_variable <- function(data, variable_name) {
library(dplyr)
library(tidyr)
library(ggplot2)
# Filter and reshape data
data_filtered <- data %>%
filter(Variable %in% c(variable_name, "AI Initiated")) %>%
pivot_wider(names_from = Variable, values_from = Value)
# Clean numeric variable (remove ' chars')
data_filtered[[variable_name]] <- as.numeric(gsub(" chars", "", data_filtered[[variable_name]]))
# Convert AI Initiated to factor and label clearly
data_filtered$InitiationType <- factor(
ifelse(data_filtered[["AI Initiated"]] == "True", "AI initiated", "User initiated"),
levels = c("AI initiated", "User initiated")
)
# Perform t-test
t_test_result <- t.test(data_filtered[[variable_name]] ~ data_filtered$InitiationType)
print(t_test_result)
# Format p-value for display
p_val <- signif(t_test_result$p.value, 3)
df <- round(t_test_result$parameter, 2)
# Calculate standard deviation by group
group_sd <- data_filtered %>%
group_by(InitiationType) %>%
summarise(sd = sd(!!sym(variable_name), na.rm = TRUE)) %>%
ungroup()
# Format SD text for annotation
sd_text <- paste(
paste("\n User ", "SD =", signif(group_sd$sd[1], 3)),
paste("AI ","SD =", signif(group_sd$sd[2], 3),"\n"),
sep = "\n"
)
# Create the plot
y_max <- max(data_filtered[[variable_name]], na.rm = TRUE)
y_min <- min(data_filtered[[variable_name]], na.rm = TRUE)
y_range <- y_max - y_min
# Position of annotation
text_x <- 1.5
text_y <- y_max - 0.1 * y_range  # Slightly above the highest point
# Rectangle size relative to data range
rect_height <- 0.29 * y_range
rect_width <- 0.5  # constant width across plots
p <- ggplot(data_filtered, aes(x = InitiationType, y = !!sym(variable_name), fill = InitiationType)) +
geom_boxplot() +
geom_jitter(width = 0.2, alpha = 0.5) +
# Draw white rectangle first
annotate("rect",
xmin = text_x - rect_width / 2, xmax = text_x + rect_width / 2,
ymin = text_y - rect_height / 1.5, ymax =  text_y + rect_height / 1.5,
fill = "white", color = "black", alpha = 1) +
# Then draw the text
annotate("text",
x = text_x,
y = text_y,
label = paste0("p = ", p_val, "\ndf = ", df, sd_text),
size = 5, hjust = 0.5) +
labs(
title = paste("Comparison of", variable_name, "by AI Initiation"),
x = "Initiation Type",
y = variable_name
) +
scale_fill_manual(
values = c("AI initiated" = "steelblue", "User initiated" = "tomato")
) +
scale_y_continuous(
labels = scales::comma,
limits = c(0, y_max + 0.2 * y_range)  # extend a bit more to fit the box
) +
theme_minimal() +
theme(legend.position = "none")
# Save the plot
ggsave(
filename = paste0("plots/Transcription_", gsub(" ", "_", variable_name), ".png"),
plot = p, width = 10, height = 6, dpi = 300, bg = "white"
)
return(list(plot = p, t_test = t_test_result))
}
# Analyze "Average Sentence Length of User"
result_Sentence  <- analyze_variable(data, "Average Sentence Length of User")
# Show the plot
result_Sentence$plot
# Analyze "Average Sentence Length of User"
result_Time <- analyze_variable(data, "Difference in Seconds")
result_Time$plot
# Analyze "Average Sentence Length of User"
result_Turns <- analyze_variable(data, "Total Turns")
result_Turns$plot
